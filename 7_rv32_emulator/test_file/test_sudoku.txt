.data
board:      .byte     0  6  0  1  0  4  0  5  0
            .byte     0  0  8  3  0  5  6  0  0
            .byte     2  0  0  0  0  0  0  0  1
            .byte     8  0  0  4  0  7  0  0  6
            .byte     0  0  6  0  0  0  3  0  0
            .byte     7  0  0  9  0  1  0  0  4
            .byte     5  0  0  0  0  0  0  0  2
            .byte     0  0  7  2  0  6  9  0  0
            .byte     0  4  0  5  0  8  0  7  0
.text
main:
    mv      x12  x10            # Offset of first cell to guess
    jal     guess                 # Start brute-forcing the solution
    mv      s0  a0              # Save guess() return code
    bnez    s0  print_err        # Check if guess() return code != 0
    jal     print_board           # Print the solution (if any)
    j       exit                  # Exit with guess() return code
print_err:
    hcf
exit:
    hcf
guess:
    sub     sp  sp  20          # Make room on the stack to save registers
    sw      ra  16(sp)          # Save the return address
    sw      s3  12(sp)          # Save the s3 register
    sw      s2  8(sp)           # Save the s2 register
    sw      s1  4(sp)           # Save the s1 register
    sw      s0  0(sp)           # Save the s0 register
    mv      s0  a2              # Save the argument in s0
    beq     s0  81  guess_ret_ok # Check if offset's outside the board's bounds
    li      s3  9                # Store the board size in s3
    div     s2  s0  s3           # Divide the cell's offset by the board size
    remu    s1  s0  s3 
    lb      t0  board + 0(s0)   # Load current cell's value in t0
    beqz    t0  guess_loop       # If the cell is empty  start guessing
    addi    a2  s0  1           # Otherwise  increment the offset
    jal     guess                 #   and go on to the next cell
    j       guess_ret             # Return the value returned by guess()
guess_loop:
    mv      a2  s3              # Pass the number to check as the 1st arg
    mv      a3  s1              # Pass the row index as 2nd arg
    mv      a4  s2              # Pass the column index as 3rd arg
    jal     check                 # Call the check() function
    bnez    a0  guess_chk_failed # Examine check() return value
    sb      s3  board + 0(s0)   # If OK  assign number to cell
    addi    a2  s0  1           # Increment the offset
    jal     guess                 # Recursively call the guess() function()
    beqz    a0  guess_ret        # Return if guess() succeeded
guess_chk_failed:
    sub     s3  1                # Decrement the number to test
    bnez    s3  guess_loop       #   and test it
    sb      0  board + 0(s0) # If no number worked  empty the cell
    li      a0  1                # Return code is 1 (failure)
    j       guess_ret             # Jump to return instructions
guess_ret_ok:
    mv      a0  0            # Return code is 0 (success)
guess_ret:
    lw      s0  0(sp)           # Restore the s0 register
    lw      s1  4(sp)           # Restore the s1 register
    lw      s2  8(sp)           # Restore the s2 register
    lw      s3  12(sp)          # Restore the s3 register
    lw      ra  16(sp)          # Restore the return address
    addi    sp  sp  20          # Clean up the stack
    ret     ra
    jalr    s0  0(ra)
check:
    li      t0  9                # Set counter
    mul     t1  a3  t0         # Offset of the first cell in the row
check_row:
    lb      t2  board + 0(t1)   # Value in the current cell
    beq     a2  t2  check_ret_fail  # Number already present in row
    addi    t1  t1  1           # Increment the pointer to the current cell
    sub     t0  t0  1           # Decrement the counter
    bnez    t0  check_row        # Check the next cell in the row
    mv      t1  a4              # Offset of the first cell in the column
check_col:
    lb      t2  board + 0(t1)   # Value of the current cell
    beq     a2  t2  check_ret_fail  # Number already present in column
    addi    t1  t1  9           # Increment the pointer to the current cell
    blt     t1  81  check_col
    beq     t1  81  check_col
    div     t0  a3  3           # t0 = row / 3
    mul     t0  t0  27          # Offset of the row
    div     t1  a4  3           # t1 = col / 3
    mul     t1  t1  3           # Offset of the column
    add     t1  t0  t1         # Offset of the first cell in the box
    li      t0  3                # Set up the row counter
    li      t3  3                # Set up the column counter
check_box:
    lb      t2  board + 0(t1)   # Value of the current cell
    beq     a2  t2  check_ret_fail  # Number already present in column
    sub     t3  t3  1           # Decrement the column counter
    beqz    t3  end_box_row      # Check if end of current box row is reached
    addi    t1  t1  1           # Increment the pointer to the current cell
    j       check_box             # Check the next cell in the row
end_box_row:
    addi    t1  t1  7           # Increment the pointer to the current cell
    li      t3  3                # Reset the column counter
    sub     t0  t0  1           # Decrement the row counter
    bnez    t0  check_box        # Check if end of box is reached
    mv      a0  0            # Return code is 0 (success)
    j       check_ret             # Jump to the return instructions
check_ret_fail:
    li      a0  1                # Return code is 1 (failure)
check_ret:
    jalr    s0  0(ra)
print_board:
    # Set up the stack frame
    sub     sp  sp  16          # Make room on the stack to save registers
    sw      ra  12(sp)          # Save the return address
    sw      s2  8(sp)           # Save the s2 register
    sw      s1  4(sp)           # Save the s1 register
    sw      s0  0(sp)           # Save the s0 register

    # Initialize registers
    la      s0  board            # s0 points to the cell to print
    mv      s1  0            # s1 keeps track of the current row
    mv      s2  0            # s2 keeps track of the current column

    li      a0  0                # Load print_string syscall number in a0
    syscall                       # Execute the syscall
print_cell:
    li      a0  1                # Load print_string syscall number in a0
    syscall                       # Execute the syscall
    lb      a2  (s0)            # Load the address of the number to print
    li      a0  2                # Load print_int syscall number in a0
    syscall                       # Execute the syscall
    addi    s0  s0  1           # Point to the next board cell
    addi    s2  s2  1           # Increment the column counter
    blt     s2  9  print_cell    # Iterate the loop until the row is completed
    li      a0  3                # Load print_string syscall number in a0
    syscall                       # Execute the syscall
    mv      s2  0            # Reset the column counter
    addi    s1  s1  1           # Increment the row counter
    blt     s1 9  print_cell     # Restart the loop until the table is complete
    lw      s0  0(sp)           # Restore the s0 register
    lw      s1  4(sp)           # Restore the s1 register
    lw      s2  8(sp)           # Restore the s2 register
    lw      ra  12(sp)          # Restore the return address
    addi    sp  sp  16          # Clean up the stack
    jalr    s0  0(ra)
    
